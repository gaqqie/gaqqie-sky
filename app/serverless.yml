service: ${self:custom.profile}-app

custom:
  profile: gaqqie-sky
  defaultStage: dev
  environment:
    dev: ${file(../conf/dev.yml)}
    prd: ${file(../conf/prd.yml)}
  webSiteName: ${self:custom.environment.${self:provider.stage}.webSiteName}
  s3Sync:
    - bucketName: ${self:custom.webSiteName}
      localDir: ../web/dist
  lambdaRetry:
    - ErrorEquals:
        - Lambda.ServiceException
        - Lambda.AWSLambdaException
        - Lambda.SdkClientException
      IntervalSeconds: 1
      MaxAttempts: 3
      BackoffRate: 2

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profile}-${self:provider.stage}
  region: ${self:custom.environment.${self:provider.stage}.region}
  memorySize: 512
  timeout: 30
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221
  #tracing: true
  environment:
    PROFILE: ${self:custom.profile}
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}
    CORS_ORIGIN: "*"
    # resource name
    TABLE_JOB: ${self:custom.profile}-${self:provider.stage}-job
    TABLE_DEVICE: ${self:custom.profile}-${self:provider.stage}-device
    TABLE_PROVIDER: ${self:custom.profile}-${self:provider.stage}-provider
    QUEUE_PREFIX: ${self:custom.profile}-${self:provider.stage}-
    BUCKET_RESULT: ${self:custom.profile}-${self:provider.stage}-result
    BUCKET_PROVIDER: ${self:custom.profile}-${self:provider.stage}-provider
    # parameter
    IBMQ_TOKEN: ${self:custom.environment.${self:provider.stage}.ibm.ibmq_token}
  #ecr:
  #  images:
  #    container-qiskit:
  #      path: container-qiskit
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [DynamoDbTableJob, Arn]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [DynamoDbTableDevice, Arn]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [DynamoDbTableProvider, Arn]
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource:
            - "Fn::GetAtt": [QueueJob, Arn]
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - "Fn::GetAtt": [S3BucketResult, Arn]
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - "Fn::GetAtt": [S3BucketProvider, Arn]
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"

package:
  patterns:
    - "!node_modules/**"
    - "!tests/**"
    - "!__pycache__/**"
    - "!json,yaml"

functions:
  UserApiSubmitJob:
    handler: gaqqie_sky.user_api_jobs.submit_job
  InnnerApiSubmitJobToIbm:
    image: ${self:custom.environment.${self:provider.stage}.ibm.image.InnnerApiSubmitJobToIbm}
    command: gaqqie_sky.provider.ibm_provider.submit_job
    timeout: 60
  InnnerApiPollJobToIbm:
    image: ${self:custom.environment.${self:provider.stage}.ibm.image.InnnerApiPollJobToIbm}
    command: gaqqie_sky.provider.ibm_provider.poll_jobs
    timeout: 300
    events:
      - schedule:
          rate: cron(0/10 * * * ? *)
          enabled: ${self:custom.environment.${self:provider.stage}.ibm.schedule.InnnerApiPollJobToIbm}
          #enabled: ${self:custom.schedule.poll_enabled_ibm}
  UserApiGetJobs:
    handler: gaqqie_sky.user_api_jobs.get_jobs
  UserApiGetJobById:
    handler: gaqqie_sky.user_api_jobs.get_job_by_id
  UserApiCancelJobById:
    handler: gaqqie_sky.user_api_jobs.cancel_job_by_id
  UserApiGetResultByJobId:
    handler: gaqqie_sky.user_api_jobs.get_result_by_job_id
  UserApiGetDevices:
    handler: gaqqie_sky.user_api_devices.get_devices
  UserApiGetDeviceByName:
    handler: gaqqie_sky.user_api_devices.get_device_by_name
  UserApiGetDeviceByProviderName:
    handler: gaqqie_sky.user_api_devices.get_device_by_provider_name
  UserApiGetDeviceImageByName:
    handler: gaqqie_sky.user_api_devices.get_device_image_by_name
  UserApiGetProviders:
    handler: gaqqie_sky.user_api_providers.get_providers
  UserApiGetProviderByName:
    handler: gaqqie_sky.user_api_providers.get_provider_by_name
  ProdiverApiReceiveJob:
    handler: gaqqie_sky.prodiver_api_jobs.receive_job
  ProdiverApiRegisterResult:
    handler: gaqqie_sky.prodiver_api_jobs.register_result
  ProdiverApiRegisterDevice:
    handler: gaqqie_sky.prodiver_api_devices.register_device
  ProdiverApiUpdateDevice:
    handler: gaqqie_sky.prodiver_api_devices.update_device
  ProdiverApiRegisterProvider:
    handler: gaqqie_sky.prodiver_api_providers.register_provider
  ProdiverApiUpdateProvider:
    handler: gaqqie_sky.prodiver_api_providers.update_provider

resources:
  Resources:
    # DynamoDB
    DynamoDbTableJob:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TABLE_JOB}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        # on demand mode
        BillingMode: PAY_PER_REQUEST
    DynamoDbTableDevice:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TABLE_DEVICE}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        # on demand mode
        BillingMode: PAY_PER_REQUEST
    DynamoDbTableProvider:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TABLE_PROVIDER}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        # on demand mode
        BillingMode: PAY_PER_REQUEST

    # SQS
    QueueJob:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.QUEUE_PREFIX}qiskit_simulator.fifo
        FifoQueue: true
        # MaximumMessageSize: 262144 # 256KB(default)
        ReceiveMessageWaitTimeSeconds: 0
        ContentBasedDeduplication: true
        MessageRetentionPeriod: 1209600 # 14 days(maximum limit)

    # S3
    S3BucketResult:
      Type: "AWS::S3::Bucket"
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.BUCKET_RESULT}
        AccessControl: Private
    S3BucketResultPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket:
          Ref: S3BucketResult
        PolicyDocument:
          Statement:
            - Sid: IamRoleLambdaGetObject
              Effect: Allow
              Principal:
                AWS:
                  Fn::GetAtt: [IamRoleLambdaExecution, Arn]
              Action:
                - s3:*
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - arn:aws:s3:::${self:provider.environment.BUCKET_RESULT}
                - arn:aws:s3:::${self:provider.environment.BUCKET_RESULT}/*
    S3BucketProvider:
      Type: "AWS::S3::Bucket"
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.BUCKET_PROVIDER}
        AccessControl: Private
    S3BucketProviderPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket:
          Ref: S3BucketProvider
        PolicyDocument:
          Statement:
            - Sid: IamRoleLambdaGetObject
              Effect: Allow
              Principal:
                AWS:
                  Fn::GetAtt: [IamRoleLambdaExecution, Arn]
              Action:
                - s3:*
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - arn:aws:s3:::${self:provider.environment.BUCKET_PROVIDER}
                - arn:aws:s3:::${self:provider.environment.BUCKET_PROVIDER}/*
    #S3BucketLog:
    #  Type: AWS::S3::Bucket
    #  DeletionPolicy: Retain
    #  Properties:
    #    BucketName: ${self:custom.profile}-${self:provider.stage}-log
    #    AccessControl: LogDeliveryWrite
    S3BucketWebSite:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webSiteName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        #LoggingConfiguration:
        #  DestinationBucketName:
        #    Ref: S3BucketLog
        #  LogFilePrefix: ${self:custom.webSiteName}/
    S3BucketWebSitePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketWebSite
        PolicyDocument:
          Statement:
            - Sid: PublicGetObject
              Effect: Allow
              Principal: "*"
              Action:
               - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.webSiteName}/*

    ### API Gateway(user API)
    ApiGatewayRestApiUser:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Body: ${file(./gaqqie-user-api.yaml)}
    ApiGatewayDeploymentUser:
      Type: "AWS::ApiGateway::Deployment"
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApiUser
        StageName: ${self:provider.stage}
    # job interface
    UserApiSubmitJobPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - UserApiSubmitJobLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    UserApiGetJobsPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - UserApiGetJobsLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    UserApiCancelJobByIdPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - UserApiCancelJobByIdLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    UserApiGetJobByIdPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - UserApiGetJobByIdLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    UserApiGetResultByJobIdPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - UserApiGetResultByJobIdLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    # device interface
    UserApiGetDevicesPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - UserApiGetDevicesLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    UserApiGetDeviceByNamePermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - UserApiGetDeviceByNameLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    # provider interface
    UserApiGetProvidersPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - UserApiGetProvidersLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"

    ### API Gateway(prodiver API)
    ApiGatewayRestApiProdiver:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Body: ${file(./gaqqie-provider-api.yaml)}
    ApiGatewayDeploymentProdiver:
      Type: "AWS::ApiGateway::Deployment"
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApiProdiver
        StageName: ${self:provider.stage}
    # job interface
    ProdiverApiReceiveJobPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ProdiverApiReceiveJobLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    ProdiverApiRegisterResultPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ProdiverApiRegisterResultLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    # device interface
    ProdiverApiUpdateDevicePermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ProdiverApiUpdateDeviceLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
    # provider interface
    ProdiverApiUpdateProviderPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ProdiverApiUpdateProviderLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"

plugins:
  - serverless-s3-sync
