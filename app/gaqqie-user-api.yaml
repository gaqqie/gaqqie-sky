openapi: 3.0.1
info:
  title: gaqqie user API
  contact:
    email: tknstyk@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.2.0
externalDocs:
  description: gaqqie user API
  url: https://github.com/gaqqie/gaqqie-sky/blob/main/app/gaqqie-user-api.yaml
paths:
  /v1/jobs:
    post:
      tags:
      - job
      operationId: submit_job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobbeforesubmission'
        required: true
      responses:
        200:
          description: successful queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        405:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiSubmitJobLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
    get:
      tags:
      - job
      operationId: get_jobs
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/job'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetJobsLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
      x-amazon-apigateway-cors:
        allowOrigins: ${self:provider.environment.CORS_ORIGIN}
        allowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
          - X-Amz-User-Agent
  /v1/jobs/{id}:
    get:
      tags:
      - job
      operationId: get_job_by_id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        404:
          description: job not found
          content: {}
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetJobByIdLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
  /v1/jobs/{id}/cancel:
    get:
      tags:
      - job
      operationId: cancel_job_by_id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        404:
          description: job not found
          content: {}
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiCancelJobByIdLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
  /v1/results/{job_id}:
    get:
      tags:
      - job
      operationId: get_result_by_job_id
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        404:
          description: result not found
          content: {}
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetResultByJobIdLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
  /v1/devices:
    get:
      tags:
      - device
      operationId: get_devices
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/device'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetDevicesLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
  /v1/devices/{name}:
    get:
      tags:
      - device
      operationId: get_device_by_name
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
        404:
          description: name not found
          content: {}
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetDeviceByNameLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
  /v1/devices/provider/{provider_name}:
    get:
      tags:
      - device
      operationId: get_device_by_provider_name
      parameters:
      - name: provider_name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/device'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetDeviceByProviderNameLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
  /v1/devices/{name}/image:
    get:
      tags:
      - device
      operationId: get_device_image_by_name
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: name not found
          content: {}
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetDeviceImageByNameLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
  /v1/providers:
    get:
      tags:
      - provider
      operationId: get_providers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/provider'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetProvidersLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
  /v1/providers/{name}:
    get:
      tags:
      - provider
      operationId: get_provider_by_name
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
        404:
          description: name not found
          content: {}
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserApiGetProviderByNameLambdaFunction.Arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
components:
  schemas:
    jobbeforesubmission:
      required:
      - device_name
      - instructions
      type: object
      properties:
        name:
          type: string
        provider_name:
          type: string
        device_name:
          type: string
        instructions:
          type: string
    job:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: a unique id of job
        name:
          type: string
        status:
          type: string
          enum:
          - QUEUED
          - RUNNING
          - SUCCEEDED
          - CANCELLED
          - FAILED
        provider_name:
          type: string
        device_name:
          type: string
        create_time:
          type: string
        end_time:
          type: string
    result:
      required:
      - job_id
      type: object
      properties:
        job_id:
          type: string
          description: a unique id of job
        results:
          type: string
    device:
      required:
      - name
      - provider_name
      - status
      - num_qubits
      - max_shots
      type: object
      properties:
        name:
          type: string
          description: a unique name of device
        provider_name:
          type: string
        status:
          type: string
          enum:
          - ACTIVE
          - SUBMITTABLE
          - UNSUBMITTABLE
          default: ACTIVE
        description:
          type: string
        num_qubits:
          type: integer
          format: int32
          minimum: 1
        max_shots:
          type: integer
          format: int32
          minimum: 1
        queued_jobs:
          type: integer
          format: int32
          minimum: 0
        details:
          type: string
    provider:
      required:
      - name
      - status
      type: object
      properties:
        name:
          type: string
          description: a unique name of provider
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          default: ACTIVE
        description:
          type: string
        details:
          type: string
